// Here I list the context free grammar for the java implementation
// of the Lox programming Language in Backusâ€“Naur form (BNF) following
// the rules here: https://palle-k.github.io/Covfefe/bnf.html
// * => [{}]
// + => {}
// ? => []

<program> ::= [{<declaration>}] "EOF"

// declarations
<declaration>  ::= <statement> | <varDecl> | <funDecl> | <classDecl>
<varDecl>      ::= "var" IDENTIFIER [ "=" <expression> ] ";";
<funDecl>      ::= "fun" <function>
<function>     ::= IDENTIFIER <funSignature>
<funSignature> ::= "(" [<parameters>] ")" <blockStmt>
<parameters>   ::= IDENTIFIER [{ "," IDENTIFIER }]
<classDecl>    ::= "class" IDENTIFIER [ "<" IDENTIFIER ]"{" [{<function>}]  "}"

// statements
<statement> ::= <exprStmt> | <printStmt> | <blockStmt> | <ifStmt> | <whileStmt> | <forStmt> | <returnStmt>

<exprStmt>   ::=  expression ";"
<printStmt>  ::=  "print" expression ";"
<blockStmt>  ::=  "{" [{declaration}] "}"
<ifStmt>     ::= "if" "(" <expression> ")" <statement> ["else" <statement> ]
<whileStmt>  ::= "while" "(" <expression> ")" <statement>
<forStmt>    ::= "for" "(" ( <varDecl> | <exprStmt> | ";" )  [<expression>] ";" [<expression>] ")" <statement>
<returnStmt> ::= "return" [<expression>] ";"

// expressions c:
<expression> ::= <assigment>
<assigment>  ::= [ <call> "." ] IDENTIFIER <assigmentSign> <assigment> | <logical_or>

<assigmentSign> ::=  "=" | "+=" | "-=" | "*=" | "/="

<logical_or>  ::= <logical_and> [{ "||" <logical_or> }]
<logical_and> ::= <equality> [{ "||" <logical_and> }]

<equality> ::= <comparison> [{ ( "==" | "!=" ) <equality> }]
<comparison> ::= <term> [{ ( ">"| ">=" | "<"| "<=" ) <comparison> }]
<term>   ::= <factor> [{ ( "+" | "-" ) <term> }]
<factor> ::= <unary> [{ ( "*" | "/" ) factor  }]

<unary>   ::= <call> | ( "-" | "!" ) <unary>
<call>    ::= <primary> [{ ( "(" [<arguments>] ")" ) | ( "." IDENTIFIER ) }]
<arguments> ::= <expression> [{ "," <expression> }]

<primary> ::= "(" <expression> ")" | "false" | "true"
           | "nil" | NUMBER | STRING | IDENTIFIER | THIS
           | <anonymousFunDecl>
           | SUPER "." IDENTIFIER

<anonymousFunDecl> ::= "fun" <funSignature>


// TODO: define NUMBER, STRING and IDENTIFIER
// NUMBER ::= { <digit> } [ "." {<digit>} ]
// STRING ::= '"' anything except '"' '"'
// IDENTIFIER ::= ( <alpha> | "_" ) [{ ( <alpha> | "_" | <digit> ) }]
// <digit> ::= ....
// <alpha> ::=
