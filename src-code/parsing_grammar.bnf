// Here I list the context free grammar for the java implementation
// of the Lox programming Language in Backusâ€“Naur form (BNF) following
// the rules here: https://palle-k.github.io/Covfefe/bnf.html
// * => {[]}
// + => {}
// ? => []

<program> ::= {[<declaration>]} "EOF"

// declarations
<declaration> ::= <varDecl> | <statement>
<varDecl>     ::= "var" IDENTIFIER [ "=" <expression> ] ";";

// statements
<statement> ::= <exprStmt> | <printStmt> | <blockStmt> | <ifStmt> | <whileStmt> | <forStmt>

<exprStmt>  ::=  expression ";"
<printStmt> ::=  "print" expression ";"
<blockStmt> ::=  "{" declaration* "}"
<ifStmt>    ::= "if" "(" <expression> ")" <statement> ["else" <statement> ]
<whileStmt> ::= "while" "(" <expression> ")" <statement>
<forStmt>   ::= "for" "(" ( <varDecl> | <exprStmt> | ";" )  [<expression>] ";" [<expression>] ")" <statement>

// expressions c:
<expression> ::= <assigment>
<assigment>  ::= IDENTIFIER "=" <assigment> | <logical_or>

<logical_or>  ::= <logical_and> {[ "||" <logical_or> ]}
<logical_and> ::= <equality> {[ "||" <logical_and> ]}

<equality> ::= <comparison> {[ ( "==" | "!=" ) <equality> ]}
<comparison> ::= <term> {[ ( ">"| ">=" | "<"| "<=" ) <comparison> ]}
<term>   ::= <factor> {[ ( "+" | "-" ) <term> ]}
<factor> ::= <unary> {[ ( "*" | "/" ) factor  ]}

<unary>   ::= <primary> | ( "-" | "!" ) <unary>
<primary> ::= "(" <expression> ")" | "false" | "true"
           | "nil" | NUMBER | STRING | IDENTIFIER

// TODO: define NUMBER, STRING and IDENTIFIER
// NUMBER ::= { <digit> } [ "." {<digit>} ]
// STRING ::= '"' anything except '"' '"'
// IDENTIFIER ::= ( <alpha> | "_" ) [{ ( <alpha> | "_" | <digit> ) }]
// <digit> ::= ....
// <alpha> ::=